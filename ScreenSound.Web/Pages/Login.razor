@page "/Login"
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthAPI AuthAPI
@attribute [AllowAnonymous]
@inject NavigationManager NavigationManager

<h3>Login</h3>

<MudPaper Class="px-8 pt-2 pb-4 mx-16 my-8" Justify="Justify.Center">

        <AuthorizeView>
            <Authorized>
                <p>Você está logado como @context.User.Identity.Name</p>
            </Authorized>
            <NotAuthorized>

            <MudForm>

                <MudTextField T="string" Label="Email" @bind-Value="email"
                              Variant="Variant.Outlined" Class="my-4"
                              Required="true" RequiredError="Email obrigatório!"
                              OnlyValidateIfDirty="true" />

                <MudTextField T="string" Label="Senha" @bind-Value="senha"
                              InputType="InputType.Password"
                              Variant="Variant.Outlined" Class="my-4"
                              Required="true" RequiredError="Senha obrigatória!"
                              OnlyValidateIfDirty="true" />

                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                           Class="my-6" @onclick="FazerLogin">
                    Login
                </MudButton>

            </MudForm>
               
            </NotAuthorized>
        </AuthorizeView>



</MudPaper>

@code {
    private string? email;
    private string? senha;

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private async Task FazerLogin()
    {
        var resposta = await AuthAPI.LoginAsync(email, senha);
        if(resposta.Sucesso)
        {
            if (!string.IsNullOrWhiteSpace(ReturnUrl))
            {
                NavigationManager.NavigateTo(ReturnUrl);
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
    }

}
